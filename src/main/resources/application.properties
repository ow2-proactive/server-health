###################################
# TODO                           ##
###################################

# AuthenticationService.java: set property here instead of hardcoded link

###################################
##  Spring Boot Actuator params  ##
###################################

# How we use Spring Boot Actuator:

# 0 - We do not want to use Spring Boot Security to provide security when
# accessing Actuator endpoints.
# 0 - Instead, we want to use the ProActive authentication scheme based on the
# 'sessionid' fields.
# 1 - We therefore disable all the default endpoints.
# 2 - We create one custom endpoint and its MVC-enabled counterpart,
# so that we can use annotations such as @RequestMapping and @RequestHeader on it
# 3 - Since the non-MVC endpoint cannot leverage @RequestHeader, we disable it.
# (its MVC-enabled counterpart is still enabled).
# 4 - On the MVC-enabled endpoint, we leverage @RequestHeader
# to retrieve the 'sessionid' field, and check if the user asking for the endpoint is admin.

# Disable all endpoints
endpoints.autoconfig.enabled=false
endpoints.beans.enabled=false
endpoints.configprops.enabled=false
endpoints.dump.enabled=false
endpoints.env.enabled=false
endpoints.health.enabled=false
endpoints.info.enabled=true
endpoints.metrics.enabled=false
endpoints.mappings.enabled=false
endpoints.shutdown.enabled=false
endpoints.trace.enabled=false

# It seems not possible to create one MVC-enabled endpoint without
# creating its 'parent' endpoint.
# Since the parent endpoint (pahealth) cannot leverage @RequestHeader,
# we disable it.
endpoints.pahealth.enabled=false